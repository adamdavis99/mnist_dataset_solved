# -*- coding: utf-8 -*-
"""mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18ftsGGgPaIEm1H8NW_AcY-jkRZVTqrYf
"""

!pip install q keras==2.3.0

"""# New Section"""

import tensorflow as tf
import keras
print(keras.__version__)

from numpy import mean
from numpy import std
import tensorflow as tf
from matplotlib import pyplot
from sklearn.model_selection import KFold
from keras.datasets import mnist
from keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Dense
from keras.layers import Flatten
from keras.optimizers import SGD
from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
from keras.models import load_model
def load_dataset():
  (x_train,y_train),(x_test,y_test)=mnist.load_data()
  print(x_train.shape)
  print(y_train.shape)
  print(x_test.shape)
  print(y_test.shape)
  for i in range(9):
	  pyplot.subplot(3,3,1+i)
	  pyplot.imshow(x_train[i], cmap=pyplot.get_cmap('gray'))

  pyplot.show()
  x_train=x_train.reshape((x_train.shape[0],28,28,1))
  x_test=x_test.reshape((x_test.shape[0],28,28,1))
  y_train=to_categorical(y_train)
  y_test=to_categorical(y_test)
  return x_train,y_train,x_test,y_test

def define_model():

  model=Sequential()
  model.add(Conv2D(32,(3,3),activation='relu',kernel_initializer='he_uniform',input_shape=(28,28,1)))
  model.add(MaxPooling2D((2, 2)))
  model.add(Flatten())
  model.add(Dense(100, activation='relu', kernel_initializer='he_uniform'))
  model.add(Dense(10, activation='softmax'))
  opt = SGD(lr=0.01, momentum=0.9)
  model.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])
  return model

def prep_pixels(train,test):
  train_norm=train.astype('float32')
  test_norm=e=test.astype('float32')
  train_norm=train_norm/255.0
  test_norm=test_norm/255.0
  return train_norm,test_norm

#def evaluate_model(x,y,n):
  #kfold=KFold(n,True,1)
  #for train_x,test_x in kfold.split(x):
    #model=define_model()
    #trainX,testX,trainY,testY=x[train_x],x[test_x],y[train_x],y[test_x]
    #history=model.fit(trainX,trainY,epochs=50,batch_size=32,validation_data=(testX,testY),verbose=0)
    #_,acc=model.evaluate(testX,testY,verbose=0)
    #print('> %.3f' % (acc * 100.0))
    



def run_test_harness():
  trainX, trainY, testX, testY = load_dataset()
  trainX, testX = prep_pixels(trainX, testX)
  model = define_model()
  model.fit(trainX, trainY, epochs=50, batch_size=32, verbose=0)
  _, acc = model.evaluate(testX, testY, verbose=0)
  print('> %.3f' % (acc * 100.0))
  model.save('final_model.h5')

def load_image(filename):
  image=load_img(filename,grayscale=True,target_size=(28,28))
  image=img_to_array(image)
  image=image.reshape(1,28,28,1)
  image=image.astype('float32')
  image=image/255
  return image

def run_example():
  img=load_image('sample_image.png')
  model=load_model('final_model.h5')
  digit=model.predict_classes(img)
  print(digit)
  

run_example()

	


  


run_test_harness()

